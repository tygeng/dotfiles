"==========
"" adjust configuration for such hostile environment as Windows {{{
if has("mac") 
set clipboard=unnamed
map [A <Up>
map [B <Down>
map [D <Left>
map [C <Right>
imap [A <Up>
imap [B <Down>
imap [D <Left>
imap [C <Right>
vmap [A <Up>
vmap [B <Down>
vmap [D <Left>
vmap [C <Right>
nmap [A <Up>
nmap [B <Down>
nmap [D <Left>
nmap [C <Right>
cmap [A <Up>
cmap [B <Down>
cmap [D <Left>
cmap [C <Right>
else
set clipboard=unnamedplus
endif
"set up color
if !has("gui_running")
    set t_Co=256
endif
" set file make program according to file type. Even if vim is closed the
" history will still be kept
au FileType markdown set makeprg=multimarkdown\ %\ -o\ %.html
" au FileType tex set makeprg=latexmk\ -pdfdvi\ %
au FileType tex set makeprg=pdflatex\ -halt-on-error\ %
inoremap <M-4> <nop>
au FileType tex inoremap <M-4> $$<Left>
au FileType tex inoremap <D-Space> $$<Left>
au FileType tex inoremap <M-k> <CR>\[<CR>\]<Up><CR>
au FileType tex inoremap <D-k> <CR>\[<CR>\]<Up><CR>
"=========================
" for pathogen
call pathogen#helptags()
execute pathogen#infect()
syntax on
filetype plugin indent on
" NerdTree
nnoremap t :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen=1
let NERDTreeWinSize=48
let NERDTreeMouseMode=3
" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" au FileType c let g:ycm_global_ycm_extra_conf = '~/Dropbox/dotfiles/vim/.vim/.ycm_extra_conf_c.py'
" au FileType objc let g:ycm_global_ycm_extra_conf = '~/Dropbox/dotfiles/vim/.vim/.ycm_extra_conf_objc.py'
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_insertion=1
let g:EclimCompletionMethod = 'omnifunc'
" syntastic
" let g:syntastic_c_checkers=['make']
let g:syntastic_auto_loc_list=1
let g:syntastic_enable_signs=1
let g:syntastic_loc_list_height=5
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['c'],
                           \ 'passive_filetypes': ["tex"] }

set statusline=%<\ %n:%f\ %m%r%y%{SyntasticStatuslineFlag()}%=(%l\ ,\ %c%V)\ Total:\ %L\ 
" work around for the location list bug
autocmd FileType c,cpp,objc nnoremap ZQ :lcl<bar>q!<CR>
vmap ZQ vZQ
autocmd FileType c,cpp,objc nnoremap ZZ :lcl<bar>w<bar>lcl<bar>q<CR>
vmap ZZ vZZ
" end for syntastic
" powerline
" let g:Powerline_symbols = 'unicode'
let g:Powerline_stl_path_style = 'relative'
set laststatus=2
" For Emma html
let g:user_emmet_leader_key='<C-f>'
let g:user_emmet_install_global = 0
autocmd Filetype html,css,eruby,php call SetEmmetHTML()
function SetEmmetHTML()
    map <C-f> <nop>
    EmmetInstall
    imap hh <C-f>,
    vmap hh <C-f>,
    nmap s <C-f>/
    set tabstop=2 shiftwidth=2
endfunction
" for indent highlight
set background=dark
nmap <silent> <C-j> <Plug>IndentGuidesToggle
autocmd FileType c,python,java,cpp,objc,ruby IndentGuidesEnable
let g:indent_guides_auto_colors = 0
" let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#555555  ctermbg=240
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333333   ctermbg=235
" let g:user_emmet_settings = {
"   \  'php' : {
"   \    'extends' : 'html',
"   \    'filters' : 'c',
"   \  },
"   \  'xml' : {
"   \    'extends' : 'html',
"   \  },
"   \  'haml' : {
"   \    'extends' : 'html',
"   \  },
"   \  'eruby' : {
"   \    'extends' : 'html',
"   \  },
"   \}
" Rails-Autoformat
autocmd Filetype ruby,css,scss,eruby nnoremap <silent> <F1> :silent call AutoFormatRails()<CR>
autocmd Filetype ruby,css,scss,eruby inoremap <silent> <F1> <Esc>:silent call AutoFormatRails()<CR>a
" For DelimitMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
" For vim-ruby
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let ruby_fold = 1
" let g:rubycomplete_rails = 1
" let g:rubycomplete_load_gemfile = 1
let ruby_operators = 1
let ruby_space_errors = 1
let g:ruby_indent_access_modifier_style = 'indent'
"=========================
set tags=./tags;/
nnoremap gt :!ctags -R --fields=+iaS --extra=+f --exclude=.git --exclude=log *<CR>:redraw!<CR>
nmap gb <C-o>

"=========================
" noremap <F1> mz:%!astyle --style=java -fjxpUd -k3 <CR>`z
" imap <F1> <Esc><F1>
"=========================
" nnoremap <F1> :set wrap!<CR>
" inoremap <F1> <Esc><F1>a
"=========================
"next error for errormarker
" let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat
" nnoremap > :cn<CR>
" nnoremap < :cp<CR>
"=========================
" noremap <F5> :w<CR>:silent make<CR>:redraw!<CR>
" imap <F5> <Esc><F5>a
" nmap <A-F5> :SyntasticCheck<CR>
" imap <A-F5> <Esc><A-F5>a
" nmap <A-F6> :SyntasticToggleMode<CR>
" imap <A-F6> <Esc><A-F6>
"=========================
